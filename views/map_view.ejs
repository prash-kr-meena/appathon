<!DOCTYPE html>
<html>

<head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
        #map {
            float: right;
            height: 90%;
            width: 62%;
        }

        #content {
            float: left;
            /* border: 1px solid red; */
            height: 90%;
            width: 38%;
        }

        .filter-bar {
            border: 1px solid blue;
            position: static;
            height: 10%;
            width: 100%;
        }

        /* Optional: Makes the sample page fill the window. */
        html,
        body {
            max-width: 100%;
            overflow-x: hidden;
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    <script>
        let google_maps_js_API_with_my_key = "https://maps.googleapis.com/maps/api/js?key=" +
            "<%= config.google_maps_js_API_Key %>" + "&callback=initMap" // LOADING this it will call the initMap() method

        let array_Records_Object = JSON.parse('<%- array_Records_Object %>'); // catching rendered records
        // console.log(array_Records_Object);
    </script>
</head>

<body>

    <div class="filter-bar"></div>
    <div id="content"></div>
    <div id="map"></div>

</body>


<script>
    let map;

    let center_location = { // ! user's location using GPS
        lat: 28.7041,
        lng: 77.1025
    };

    let delear_markers_list = [];

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: center_location,
            zoom: 1,
            gestureHandling: 'cooperative',

        });

        add_markers(map);
        // console.log(delear_markers_list);
    }


    function add_markers(map) {

        array_Records_Object.forEach(cur_record => {
            console.log(cur_record);

            // CREATE Dealer_MARKER : object --> to put in the   dealer_markers_list ARRAY,  & plot on map
            let dealer_marker = {
                marker_reference: undefined, // NEEDED to attach listner for info window
                dealer_name: cur_record.name,
                marker_location: {
                    lat: cur_record.address.lat , // DELHI
                    lng: cur_record.address.long
                }
            }
            delear_markers_list.push(dealer_marker); // ADDING to the  LIST
            // console.log(dealer_marker);


            dealer_marker.marker_reference = new google.maps.Marker({ //  create A MARKER
                map: map,
                position: dealer_marker.marker_location,
                draggable: false,
                animation: google.maps.Animation.DROP,
                title: dealer_marker.dealer_name
            });

            let infoWindow = new google.maps.InfoWindow({ // create info window
                content: `<h4>${dealer_marker.dealer_name}</h4>
                           <a href="#">more deals</a>`
            });

            dealer_marker.marker_reference.addListener('click', function () { // add listner current MARKER
                infoWindow.open(map, dealer_marker.marker_reference);
            });
        });
    }



    //  --------------------    Scripts  --------------------

    loadScript("google_maps_js_API_with_my_key", google_maps_js_API_with_my_key, false); // NOT a critical script
    // console.log(google_maps_js_API_with_my_key);

    function loadScript(script_name, url, is_critical_script, callback) {
        let kill_time = 4000;

        let script = document.createElement("script")
        script.type = "text/javascript";
        script.src = url;
        document.getElementsByTagName("head")[0].appendChild(script);

        script.onload = function () {
            console.log(script_name + " : script is loaded SUCCESSFULLY");
            window.clearTimeout(timeOut_id);
        };

        script.onerror = function () {
            let message = script_name + " : script NOT loaded     ERROR  --CONNECTION PROBLEM-- ";
            alert(message);
            window.clearTimeout(timeOut_id);
            if (is_critical_script)
                throw new Error(message);
        }

        // if the script can't be loaded
        let timeOut_id = window.setTimeout(() => {
            let message = script_name + " : script NOT loaded     ERROR  --CONNECTION PROBLEM-- ";
            alert(message);

            if (is_critical_script)
                throw new Error(message);
        }, kill_time);

        // newScript = document.createElement('script');
        // newScript.setAttribute('type', 'text/javascript');
        // newScript.setAttribute('src', 'file.js');

    }
</script>

</html>